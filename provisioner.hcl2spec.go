// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package main

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	AccessKey   *string `mapstructure:"access_key" cty:"access_key" hcl:"access_key"`
	SecretKey   *string `mapstructure:"secret_key" cty:"secret_key" hcl:"secret_key"`
	Endpoint    *string `mapstructure:"endpoint" cty:"endpoint" hcl:"endpoint"`
	Source      *string `mapstructure:"source" cty:"source" hcl:"source"`
	Destination *string `mapstructure:"destination" cty:"destination" hcl:"destination"`
	Secure      *bool   `mapstructure:"secure" required:"false" cty:"secure" hcl:"secure"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatConfig)
}

// HCL2Spec returns the hcl spec of a Config.
// This spec is used by HCL to read the fields of Config.
// The decoded values from this spec will then be applied to a FlatConfig.
func (*FlatConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"access_key":  &hcldec.AttrSpec{Name: "access_key", Type: cty.String, Required: false},
		"secret_key":  &hcldec.AttrSpec{Name: "secret_key", Type: cty.String, Required: false},
		"endpoint":    &hcldec.AttrSpec{Name: "endpoint", Type: cty.String, Required: false},
		"source":      &hcldec.AttrSpec{Name: "source", Type: cty.String, Required: false},
		"destination": &hcldec.AttrSpec{Name: "destination", Type: cty.String, Required: false},
		"secure":      &hcldec.AttrSpec{Name: "secure", Type: cty.Bool, Required: false},
	}
	return s
}
